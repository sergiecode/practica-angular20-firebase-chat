/**
 * Servicio de Firestore para manejar la base de datos
 * Este servicio se encarga de guardar y recuperar los mensajes del chat
 * desde la base de datos de Firebase Firestore
 * 
 * @autor Sergie Code - Tutorial Angular 20 + Firebase
 */

import { Injectable, inject } from '@angular/core';
import { 
  Firestore, 
  collection, 
  addDoc, 
  query, 
  where, 
  orderBy, 
  onSnapshot,
  QuerySnapshot,
  DocumentData,
  Timestamp
} from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { MensajeChat, ConversacionChat } from '../models/chat.model';
import { environment } from '../../environments/environment';

@Injectable({
  // Este servicio estar√° disponible en toda la aplicaci√≥n
  providedIn: 'root'
})
export class FirestoreService {
  
  // Inyectamos el servicio de Firestore usando la nueva sintaxis de Angular
  private firestore = inject(Firestore);

  /**
   * Guarda un nuevo mensaje en Firestore
   * Cada mensaje se almacena en la colecci√≥n 'mensajes' con el ID del usuario
   * 
   * @param mensaje - El mensaje que queremos guardar en la base de datos
   * @returns Promise que se resuelve cuando el mensaje se guarda exitosamente
   */
  async guardarMensaje(mensaje: MensajeChat): Promise<void> {
    try {
      console.log('üíæ Guardando mensaje en Firestore...', mensaje);
      console.log('üîç Firebase config check:', environment.firebaseConfig.projectId);
      
      // Validamos que tenemos todos los datos requeridos
      if (!mensaje.usuarioId) {
        throw new Error('usuarioId es requerido');
      }
      if (!mensaje.contenido) {
        throw new Error('contenido es requerido');
      }
      if (!mensaje.tipo) {
        throw new Error('tipo es requerido');
      }
      
      // Obtenemos la referencia a la colecci√≥n 'mensajes'
      const coleccionMensajes = collection(this.firestore, 'mensajes');
      
      // Preparamos el mensaje para guardarlo, convirtiendo la fecha a Timestamp de Firebase
      const mensajeParaGuardar = {
        usuarioId: mensaje.usuarioId,
        contenido: mensaje.contenido,
        tipo: mensaje.tipo,
        estado: mensaje.estado || 'enviado',
        // Firebase requiere usar Timestamp en lugar de Date
        fechaEnvio: Timestamp.fromDate(mensaje.fechaEnvio)
      };
      
      console.log('üì§ Datos validados para guardar:', mensajeParaGuardar);
      
      // A√±adimos el documento a la colecci√≥n
      const docRef = await addDoc(coleccionMensajes, mensajeParaGuardar);
      
      console.log('‚úÖ Mensaje guardado exitosamente en Firestore con ID:', docRef.id);
      
    } catch (error: any) {
      console.error('‚ùå Error al guardar mensaje en Firestore:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        code: error.code,
        stack: error.stack
      });
      throw error;
    }
  }

  /**
   * Obtiene todos los mensajes de un usuario espec√≠fico en tiempo real
   * Utiliza onSnapshot para escuchar cambios en tiempo real
   * 
   * @param usuarioId - ID del usuario cuyos mensajes queremos obtener
   * @returns Observable que emite la lista de mensajes cada vez que hay cambios
   */
  obtenerMensajesUsuario(usuarioId: string): Observable<MensajeChat[]> {
    console.log('üìñ Configurando listener para mensajes del usuario:', usuarioId);
    
    return new Observable(observer => {
      // Creamos una consulta para obtener solo los mensajes del usuario especificado
      // NOTA: Removemos temporalmente orderBy para evitar el problema del √≠ndice
      const consulta = query(
        collection(this.firestore, 'mensajes'),
        // Filtramos por el ID del usuario
        where('usuarioId', '==', usuarioId)
        // Comentamos temporalmente el orderBy hasta crear el √≠ndice
        // orderBy('fechaEnvio', 'asc')
      );

      // Configuramos el listener en tiempo real
      const unsubscribe = onSnapshot(
        consulta,
        (snapshot: QuerySnapshot<DocumentData>) => {
          console.log('üîÑ === FIRESTORE SNAPSHOT RECIBIDO ===');
          console.log('üîÑ Cantidad de documentos:', snapshot.docs.length);
          console.log('üîÑ Es del cache:', snapshot.metadata.fromCache);
          console.log('üîÑ Tiene cambios pendientes:', snapshot.metadata.hasPendingWrites);
          
          // Transformamos los documentos de Firestore en nuestros objetos MensajeChat
          const mensajes: MensajeChat[] = snapshot.docs.map(doc => {
            const data = doc.data();
            
            console.log('üìÑ Documento procesado:', {
              id: doc.id,
              usuarioId: data['usuarioId'],
              tipo: data['tipo'],
              contenido: data['contenido'].substring(0, 50),
              fechaEnvio: data['fechaEnvio']?.toDate()
            });
            
            return {
              id: doc.id,
              usuarioId: data['usuarioId'],
              contenido: data['contenido'],
              tipo: data['tipo'],
              estado: data['estado'],
              // Convertimos el Timestamp de Firebase de vuelta a Date
              fechaEnvio: data['fechaEnvio'].toDate()
            } as MensajeChat;
          });
          
          // ORDENAMOS en el cliente ya que removimos orderBy de la query
          mensajes.sort((a, b) => a.fechaEnvio.getTime() - b.fechaEnvio.getTime());
          
          console.log(`üì® Total mensajes procesados y ordenados: ${mensajes.length}`);
          console.log('üì® === FIN SNAPSHOT FIRESTORE ===');
          
          // Emitimos los mensajes a trav√©s del Observable
          observer.next(mensajes);
        },
        error => {
          console.error('‚ùå Error al escuchar mensajes:', error);
          observer.error(error);
        }
      );

      // Funci√≥n de limpieza que se ejecuta cuando se cancela la suscripci√≥n
      return () => {
        console.log('üõë Cancelando listener de mensajes');
        unsubscribe();
      };
    });
  }

  /**
   * Guarda una conversaci√≥n completa en Firestore
   * √ötil para backup o para guardar metadatos de la conversaci√≥n
   * 
   * @param conversacion - La conversaci√≥n completa que queremos guardar
   * @returns Promise que se resuelve cuando la conversaci√≥n se guarda
   */
  async guardarConversacion(conversacion: ConversacionChat): Promise<void> {
    try {
      console.log('üíæ Guardando conversaci√≥n completa...', conversacion);
      
      const coleccionConversaciones = collection(this.firestore, 'conversaciones');
      
      // Preparamos la conversaci√≥n, convirtiendo las fechas a Timestamps
      const conversacionParaGuardar = {
        ...conversacion,
        fechaCreacion: Timestamp.fromDate(conversacion.fechaCreacion),
        ultimaActividad: Timestamp.fromDate(conversacion.ultimaActividad),
        // Tambi√©n convertimos las fechas de los mensajes
        mensajes: conversacion.mensajes.map(mensaje => ({
          ...mensaje,
          fechaEnvio: Timestamp.fromDate(mensaje.fechaEnvio)
        }))
      };
      
      await addDoc(coleccionConversaciones, conversacionParaGuardar);
      
      console.log('‚úÖ Conversaci√≥n guardada exitosamente');
      
    } catch (error) {
      console.error('‚ùå Error al guardar conversaci√≥n:', error);
      throw error;
    }
  }

  /**
   * Elimina todos los mensajes de un usuario
   * √ötil para funcionalidad de "limpiar historial"
   * 
   * @param usuarioId - ID del usuario cuyos mensajes queremos eliminar
   */
  async eliminarMensajesUsuario(usuarioId: string): Promise<void> {
    // NOTA: Esta funcionalidad requiere implementaci√≥n adicional
    // debido a que Firestore no permite eliminar m√∫ltiples documentos
    // en una sola operaci√≥n desde el cliente
    console.log('üóëÔ∏è Eliminaci√≥n de mensajes - Funcionalidad por implementar');
    
    // En una aplicaci√≥n real, esto se har√≠a mediante Cloud Functions
    // o mediante un proceso batch en el backend
  }
}
